#include <iostream>
#include <v8.h>

using namespace std;

using namespace v8;

int main(int argc, char* argv[])
{
	Isolate * isolate = Isolate::GetCurrent();

	HandleScope handle_scope(isolate);

	Local<ObjectTemplate> global = ObjectTemplate::New(isolate);

	Handle<Context> context = Context::New(isolate, NULL,  global);

	Context::Scope context_scope(context);

	Handle<String> source = String::NewFromUtf8(isolate,
		"function example() {"
		"return 120;"
		"}"
	);

	Handle<Script> script = Script::Compile(source);

	// script->Run();

	Handle<String> proto_example = String::NewFromUtf8(isolate, "example");

	Local<Function> func_example = Local<Function>::Cast(context->Global()->Get(proto_example));

	int arg_count = 0;

	Handle<Value> result = func_example->Call(func_example, arg_count, NULL);

	cout << result->Int32Value() << endl;

	return 0;
}
