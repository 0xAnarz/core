#!/usr/bin/python3


import os

os.environ['CONFIGURATION_LIBRARY_PATH'] = '@CONFIGURATION_LIBRARY_PATH@'
os.environ['CONFIGURATION_PATH'] = '@CONFIGURATION_PATH@'
os.environ['LOADER_LIBRARY_PATH'] = '@LOADER_LIBRARY_PATH@'
os.environ['LOADER_SCRIPT_PATH'] = '@LOADER_SCRIPT_PATH@'

import unittest
import signal
import subprocess

def sigint_handler(signal, frame):
	print('Server: SIGINT signal from client to server (Ctrl-C)');


class py_django_integration_test(unittest.TestCase):

	def test_py_django_server(self):

		signal.signal(signal.SIGINT, sigint_handler);

		print('Server: Launching python django client in background (${CMAKE_BINARY_DIR}/@TEST_SCRIPT_LAUNCHER_CLIENT_NAME@)');

		django_client = subprocess.Popen(['${CMAKE_BINARY_DIR}/@TEST_SCRIPT_LAUNCHER_CLIENT_NAME@']);

		print('Server: Launching python django server (${CMAKE_BINARY_DIR}/@TEST_SCRIPT_LAUNCHER_BASE_NAME@)');

		django_server = subprocess.Popen(['${CMAKE_BINARY_DIR}/@TEST_SCRIPT_LAUNCHER_BASE_NAME@'], env = os.environ.copy(), stderr = subprocess.STDOUT);

		django_client_output = django_client.communicate()[0];

		print(django_client_output);

		self.assertEqual(django_client.poll(), 0);

		print('Server: Python django client finished gracefully');

if __name__ == '__main__':
	unittest.main()
