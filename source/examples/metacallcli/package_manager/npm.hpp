/*
 *	MetaCall Command Line Interface by Parra Studios
 *	Copyright (C) 2016 - 2020 Vicente Eduardo Ferrer Garcia <vic798@gmail.com>
 *
 *	A command line interface example as metacall wrapper.
 *
 */

#ifndef METACALL_CLI_PACKAGE_MANAGER_NPM_HPP
#define METACALL_CLI_PACKAGE_MANAGER_NPM_HPP 1

/* -- Namespace -- */

namespace metacallcli {

namespace package_manager {

static const char npm[] =
"#!/usr/bin/env node\n"
"\n"
"/* This has been ripped off from NPM and adapted to be callable instead of invoked by exec */\n"
"\n"
"function package_manager(args) {\n"
"	// windows: running npm blah in this folder will invoke WSH, not node.\n"
"	/* global WScript */\n"
"	if (typeof WScript !== 'undefined') {\n"
"		WScript.echo(\n"
"			'npm does not work when run\\n' +\n"
"				'with the Windows Scripting Host\\n\\n' +\n"
"				\"'cd' to a different directory,\\n\" +\n"
"				\"or type 'npm.cmd <args>',\\n\" +\n"
"				\"or type 'node npm <args>'.\"\n"
"		)\n"
"		WScript.quit(1)\n"
"		return\n"
"	}\n"
"\n"
"	var unsupported = require('npm/lib/utils/unsupported.js')\n"
"	unsupported.checkForBrokenNode()\n"
"\n"
"	var log = require('npm/node_modules/npmlog')\n"
"	log.pause() // will be unpaused when config is loaded.\n"
"	log.info('it worked if it ends with', 'ok')\n"
"\n"
"	unsupported.checkForUnsupportedNode()\n"
"\n"
"	var path = require('path')\n"
"	var npm = require('npm/lib/npm.js')\n"
"	var npmconf = require('npm/lib/config/core.js')\n"
"	var errorHandler = require('npm/lib/utils/error-handler.js')\n"
"\n"
"	var configDefs = npmconf.defs\n"
"	var shorthands = configDefs.shorthands\n"
"	var types = configDefs.types\n"
"	var nopt = require('npm/node_modules/nopt')\n"
"\n"
"	// Overwrite process args\n"
"	process.argv = [ 'node', 'npm', ...args ];\n"
"\n"
"	log.verbose('cli', process.argv)\n"
"\n"
"	var conf = nopt(types, shorthands)\n"
"	npm.argv = conf.argv.remain\n"
"	if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift()\n"
"	else conf.usage = true\n"
"\n"
"	if (conf.version) {\n"
"		console.log(npm.version)\n"
"		return errorHandler.exit(0)\n"
"	}\n"
"\n"
"	if (conf.versions) {\n"
"		npm.command = 'version'\n"
"		conf.usage = false\n"
"		npm.argv = []\n"
"	}\n"
"\n"
"	log.info('using', 'npm@%s', npm.version)\n"
"	log.info('using', 'node@%s', process.version)\n"
"\n"
"	process.on('uncaughtException', errorHandler)\n"
"\n"
"	if (conf.usage && npm.command !== 'help') {\n"
"		npm.argv.unshift(npm.command)\n"
"		npm.command = 'help'\n"
"	}\n"
"\n"
"	var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm')\n"
"\n"
"	// now actually fire up npm and run the command.\n"
"	// this is how to use npm programmatically:\n"
"	conf._exit = true\n"
"	npm.load(conf, function (er) {\n"
"		if (er) return errorHandler(er)\n"
"		if (\n"
"			!isGlobalNpmUpdate &&\n"
"			npm.config.get('update-notifier') &&\n"
"			!unsupported.checkVersion(process.version).unsupported\n"
"		) {\n"
"			const pkg = require('npm/package.json')\n"
"			let notifier = require('npm/node_modules/update-notifier')({pkg})\n"
"			const isCI = require('npm/node_modules/ci-info').isCI\n"
"			if (\n"
"				notifier.update &&\n"
"				notifier.update.latest !== pkg.version &&\n"
"				!isCI\n"
"			) {\n"
"				const color = require('ansicolors')\n"
"				const useColor = npm.config.get('color')\n"
"				const useUnicode = npm.config.get('unicode')\n"
"				const old = notifier.update.current\n"
"				const latest = notifier.update.latest\n"
"				let type = notifier.update.type\n"
"				if (useColor) {\n"
"					switch (type) {\n"
"						case 'major':\n"
"							type = color.red(type)\n"
"							break\n"
"						case 'minor':\n"
"							type = color.yellow(type)\n"
"							break\n"
"						case 'patch':\n"
"							type = color.green(type)\n"
"							break\n"
"					}\n"
"				}\n"
"				const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n"
"				notifier.notify({\n"
"					message: `New ${type} version of ${pkg.name} available! ${\n"
"						useColor ? color.red(old) : old\n"
"					} ${useUnicode ? 'â†’' : '->'} ${\n"
"						useColor ? color.green(latest) : latest\n"
"					}\\n` +\n"
"					`${\n"
"						useColor ? color.yellow('Changelog:') : 'Changelog:'\n"
"					} ${\n"
"						useColor ? color.cyan(changelog) : changelog\n"
"					}\\n` +\n"
"					`Run ${\n"
"						useColor\n"
"							? color.green(`npm install -g ${pkg.name}`)\n"
"							: `npm i -g ${pkg.name}`\n"
"					} to update!`\n"
"				})\n"
"			}\n"
"		}\n"
"		npm.commands[npm.command](npm.argv, function (err) {\n"
"			// https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n"
"			if (\n"
"				!err &&\n"
"				npm.config.get('ham-it-up') &&\n"
"				!npm.config.get('json') &&\n"
"				!npm.config.get('parseable') &&\n"
"				npm.command !== 'completion'\n"
"			) {\n"
"				console.error(\n"
"					`\\n ${\n"
"						npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n"
"					} I Have the Honour to Be Your Obedient Servant,${\n"
"						npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n"
"					} ~ npm ${\n"
"						npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''\n"
"					}\\n`\n"
"				)\n"
"			}\n"
"			errorHandler.apply(this, arguments)\n"
"		})\n"
"	})\n"
"}\n"
"\n"
"module.exports = {\n"
"	package_manager,\n"
"};\n";

} /* namespace package_manager */

} /* namespace metacallcli */

#endif /* METACALL_CLI_PACKAGE_MANAGER_NPM_HPP */
